using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Management;

class Drives
{
    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    static extern bool GetDiskFreeSpace(string lpRootPathName,
                                         out ulong lpSectorsPerCluster,
                                         out ulong lpBytesPerSector,
                                         out ulong lpNumberOfFreeClusters,
                                         out ulong lpTotalNumberOfClusters);


    static void Main(string[] args)
    {
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_PhysicalMedia");
        ManagementObjectCollection information = searcher.Get();
        foreach (ManagementObject obj in information)
        {
            Console.WriteLine("Serial Number = {0}",  obj["SerialNumber"]);
        }

        try
        {
            Console.WriteLine("          type     fs                           volume         total          free    bps    spc");

            DriveInfo[] drives = DriveInfo.GetDrives();

            foreach (DriveInfo d in drives)
            {
                Console.Write(" " + d.Name.Substring(0, 2).ToLower());
                Console.Write("{0,11}", d.DriveType.ToString().ToLower());

                if (d.IsReady)
                {
                    Console.Write("{0,7}", d.DriveFormat.ToLower());
                    Console.Write("{0,33}", d.VolumeLabel);
                    Console.Write("{0,13:N0}m", d.TotalSize / (1024 * 1024));
                    Console.Write("{0,13:N0}m", d.AvailableFreeSpace / (1024 * 1024));

                    ulong sectorsPerCluster, bytesPerSector, numberOfFreeClusters, totalNumberOfClusters;

                    if (GetDiskFreeSpace(d.Name.Substring(0, 2).ToLower(),
                                           out sectorsPerCluster,
                                           out bytesPerSector,
                                           out numberOfFreeClusters,
                                           out totalNumberOfClusters))


                    {
                        Console.Write("{0,7:N0}", bytesPerSector);
                        Console.Write("{0,7:N0}", sectorsPerCluster);
                    }
                }

                Console.WriteLine();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("dr caught an exception {0}", e.ToString());
        }
    } //Main //Dri
}